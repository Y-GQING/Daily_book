  package randomAccess;
  
  
  
   import   java.io.*;
   import   java.awt.*;
   import   java.awt.event.*;
   import   javax.swing.*;
   import    javax.swing.border.*;
   

  public class UseRandomAccessFile    extends    JFrame  {  //程序显示框架类的定义
	  
    private    JTabbedPane  jPlayer   =   new   JTabbedPane();
    private    RandomAccessFile   r;   //声明访问球员数据文件的随机读写文件对象引用
	  
	 
	public static void main(String[] args) {   //程序执行入口方法
		// TODO 自动生成的方法存根
         UseRandomAccessFile f  =  new   UseRandomAccessFile();     
         f.pack();
         f.setTitle("使用随机读写文件");
         f.setVisible(true);
      
	}
   public    UseRandomAccessFile() {  //默认的构造方法
	      try  {   //创建一个随机读写的文件
	    	  r  =  new  RandomAccessFile  ("player.dat","rw");
	    	   
	      }
	      catch  (IOException  ex) {
	    	  System.out.print("Error:"  + ex);
	    	  System.exit(0);  
	      }
	      
	     jPlayer.add(new  RegisterPlayer(r),"记录球员");
	     jPlayer.add(new  ViewPlayer(r),"查看球员");
	     getContentPane().add(jPlayer);
  
   }
	
}
  
    class  Player implements  Serializable {  //创建一个球员类player来组织球员信息
    	  private  String   name;
    	  private  String   country;
    	  private  String   team;
    	  private  String   stature;
    	  private  String   position;
    	  //5个int类型常量的详细大小，它们和为一条记录的长度RECORD_SIZE
    	  
    	  final  static  int  NAME_SIZE  =  25;
    	  final  static  int  COUNTRY_SIZE = 25;
    	  final  static  int  TEAM_SIZE  =  10;
    	  final  static  int  STATURE_SIZE = 10; 
    	  final  static  int  POSITION_SZE = 10;
    	  
    	  
    	  final  static   int   RECORD_SIZE = NAME_SIZE + COUNTRY_SIZE  + TEAM_SIZE  + STATURE_SIZE  +  POSITION_SZE ;
    	  
    	public    Player () {}   //默认构造方法
    	//构造方法
    		
    	public  Player(String  name,String country,String team,String  stature,String  position) {
    		this.name  =name;
    		this.country   =  country;
    		this.team      =  team;
    		this.stature   =  stature;
    		this.position  =  position;
    	
    	}
    	  public   String  getName() {
    		  return   name;
    	  }
    	  public   String  getCountry() {
    		  return   country;
    	  }
    	  public   String  getTeam() {
    		  return   team;
    	  }
    	  public   String  getStature() {
    		  return   stature;
    	  }
    	  public   String  getPosition() {
    		  return   position;
    	  }
    	  
    	  
    	  //向数据中输入流写入球员数据
    	  public   void   writePlayer(DataOutput  out) throws   IOException{
    		  FixLengthStringIO.writeFiexedLengthString(name,NAME_SIZE,out);
    		  FixLengthStringIO.writeFiexedLengthString(country,COUNTRY_SIZE,out);
    		  FixLengthStringIO.writeFiexedLengthString(name,TEAM_SIZE,out);
    		  FixLengthStringIO.writeFiexedLengthString(stature,STATURE_SIZE,out);
    		  FixLengthStringIO.writeFiexedLengthString(position,POSITION_SZE,out);
    	  }
    	  
    	  //从输入流中读取球员的数据
    	  public void readPlayer(DataInput  in) throws IOException{ 
    		  name  =   FixLengthStringIO.readFiexedLengthString(NAME_SIZE,in); 
           country  =   FixLengthStringIO.readFiexedLengthString(COUNTRY_SIZE,in);
    team            =   FixLengthStringIO.readFiexedLengthString(TEAM_SIZE,in);
   stature        =     FixLengthStringIO.readFiexedLengthString(STATURE_SIZE,in);
    position     =      FixLengthStringIO.readFiexedLengthString(POSITION_SZE,in);
    		  
    	  }
    	  
    	  public   String   toString() {
    		  return  name + '\n'  +  country + '\n' + team + ","  + stature  + ' ' +position  +'\n';
    	  }	  
    }
   
    
    
    class   PlayerPanel   extends  JPanel{   //创造一个用来显示球员信息的面板
    	
    	JTextField  jName  =  new  JTextField(25);
    	JTextField  jCountry   =  new   JTextField(25);
    	JTextField  jTeam     =  new   JTextField(10);
    	JTextField  jStature  =  new   JTextField(10);
    	JTextField  jPosition  =  new   JTextField(10);
    	public  PlayerPanel() {  //创建一个球员面板
    		setBorder(new  BevelBorder(BevelBorder.RAISED));
    		JPanel  panel1    =  new  JPanel();
    		panel1.setLayout(new  GridLayout(3,1));
    		panel1.add(new  JLabel("姓名"));
    		panel1.add(new  JLabel("国家"));
    		panel1.add(new  JLabel("效力球队"));
    		JPanel  jpStature  =  new   JPanel();
    		jpStature.setLayout(new BorderLayout());
    		 jpStature.add(new JLabel("身高"),BorderLayout.WEST);
    		 jpStature.add(jStature,BorderLayout.CENTER);
    		 JPanel  jpPosition  = new   JPanel();
    		 jpPosition.setLayout(new  BorderLayout());
    		 jpPosition.add(new JLabel("位置"),BorderLayout.WEST);
    		 jpPosition.add(jPosition,BorderLayout.CENTER);
    		 JPanel  panel2   =  new JPanel();
    		 panel2.setLayout(new BorderLayout());
    		 panel2.add(jpStature,BorderLayout.WEST);
    		 panel2.add(jpPosition,BorderLayout.CENTER);
    		 JPanel  panel3  =  new  JPanel();
    		 panel3.setLayout(new  BorderLayout());
    		 panel3.add(jTeam,BorderLayout.CENTER);
    		 panel3.add(panel2,BorderLayout.EAST);
    		 JPanel  panel4  =  new JPanel();
    		 panel4.setLayout(new   GridLayout(3,1));
    		 panel4.add(jName);
    		 panel4.add(jCountry);
    		 panel4.add(panel3);
    		 setLayout(new BorderLayout());
    		 add(panel1,BorderLayout.WEST);
    		 add(panel4,BorderLayout.CENTER);
	
    	}
    	
    	public  Player  getPlayer() {  //从文本域中获得球员信息
           return  new Player(jName.getText().trim(),
           jCountry.getText().trim(),
    	   jTeam.getText().trim(),
    	   jStature.getText().trim(),
    	   jPosition.getText().trim());		
    	}
    	
    	public   void   setPlayer(Player  p) {  //在文本域中创建球员信息
    		jName.setText(p.getName());
    		jCountry.setText(p.getCountry());
    		jTeam.setText(p.getTeam());
    		jStature.setText(p.getStature());
    		jPosition.setText(p.getPosition());	
    	}	
    }
    
    
    class   RegisterPlayer  extends   JPanel  implements   ActionListener{   //记录球员面板
    	
    	private    JButton   jRegister;
    	private    PlayerPanel  playerPanel;
    	private    RandomAccessFile  r;
    	
    	public   RegisterPlayer(RandomAccessFile  r) {   //构造方法
    		
    		this.r  = r;
    		setLayout(new BorderLayout());
    		add(playerPanel   = new   PlayerPanel(),BorderLayout.CENTER);
    		add(jRegister  =  new   JButton("记录"),BorderLayout.SOUTH);
	       jRegister.addActionListener(this);
    	}
    	
    	public   void   actionPerformed(ActionEvent  e) {  //处理按钮动作
    		if  (e.getSource()  ==  jRegister){
    		   Player  player   =   playerPanel.getPlayer();
    		 try {
    			 r.seek(r.length());
    			 player.writePlayer(r);
    			 
    		 }
    			catch(IOException  ex) {
    				System.out.print("ERROR: " +  ex);
    				
    			}
		
    		}

    	}
  	
    }
    
    
    class    FixLengthStringIO{   //这个类包含长记录的读写的静态方法
    	// 从输入数据流中读取固定数字的字符
    	public   static  String    readFiexedLengthString  (int size,DataInput  in)  throws   IOException{
    		char c[]  = new  char[size];
    		for(int  i=0; i<size;i++)
    			c[i] = in.readChar();
    		return  new   String(c);
 		
    	}
    	
    	//向数据流中写入一定数量的字符
    	public  static  void writeFiexedLengthString(String  s,int size,DataOutput  out)  throws  IOException{   
    		 char  cBuffer[]  =  new   char[size];
    		 s.getChars(0, s.length(), cBuffer, 0);
    		 for  (int   i=s.length();i<cBuffer.length;i++)
    			 cBuffer[i]  = ' ';
    		 String  newS  = new  String(cBuffer);  
    		 out.writeChars(newS); 		
    	}
	
    }
    
    
    class   ViewPlayer  extends   JPanel  implements   ActionListener{  //查看球员面板
    	private  JButton  jFirst,jNext,jPrevious,jLast;
    	private  RandomAccessFile  r = null;
    	private  Player  player  =  new  Player();
    	private  PlayerPanel  playerPanel  =  new   PlayerPanel();
    	private  long  lastPos;
    	private  long currentPos;
    	public   ViewPlayer(RandomAccessFile r) {   //构造方法
    		this.r  = r;
    		JPanel  p  =  new JPanel();
    		p.setLayout(new  FlowLayout(FlowLayout.LEFT));
    		p.add(jFirst = new  JButton("第一个"));
    		p.add(jLast  = new  JButton("下一个"));
    		p.add(jPrevious  =  new JButton("上一个"));
    		p.add(jLast =  new JButton("最后一个"));
    		setLayout(new  BorderLayout());
    		add(playerPanel,BorderLayout.CENTER);
    		add(p,BorderLayout.SOUTH);
    		jFirst.addActionListener(this);
    		jNext.addActionListener(this);
    		jPrevious.addActionListener(this);
    		jLast.addActionListener(this);
		
    	}
    	
    	public   void   actionPerformed(ActionEvent e) {  // 处理导航按钮动作
    		String  actionCommand  = e.getActionCommand();
    		if(e.getSource()instanceof   JButton) {
    			try {
    				if("第一个".equals(actionCommand)) {
    					if(r.length()>0)
    						retrieve(0);
    				}
    				else  if("下一个".equals(actionCommand)) {
    					currentPos = r.getFilePointer();
    					if(currentPos<r.length())
    						retrieve(currentPos);	
    					
    				}
    				else  if("上一个".equals(actionCommand)) {
    					currentPos = r.getFilePointer();
    					if(currentPos>0)
    						retrieve(currentPos - 2*2*Player.RECORD_SIZE);
    			}
    				else  if("最后一个".equals(actionCommand)) {
    					lastPos  =r.length();
    					if(lastPos>0)
    						retrieve(lastPos - 2*Player.RECORD_SIZE);
		
    				}
    		}
    	catch(IOException  ex) {
    		System.out.print("Error:" + ex);
 	
    	}
 			
    }
	
 }
     
    	public   void  retrieve(long  Pos) {   //在特定的位置找回一个记录
    		try {
    			r.seek(Pos);
                player.readPlayer(r);
                playerPanel.setPlayer(player);
                    			
    		}
    		catch(IOException   ex) {
    			System.out.print("Error:"  + ex);
    		}
    		
    	}
    
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
  
  
  
